pipeline {
    agent any

    environment {
        // Custom PATH Definitions
        PATH = "/usr/local/bin/:$PATH"

        // JEST Requirements
        BASE_URL = 'https://sample.com/'
    }

    stages {
        // Slack Notification for the start of the build
        stage ('SLACK NOTIFY') {
            steps {
                // Send build started notifications
                slackSend (color: '#FFFF00', message: "STARTED: '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (<${env.BUILD_URL}|Open>)")
            }
        }

        stage ('CHECKOUT') {
          steps {
            checkout([$class: 'GitSCM',
            branches: [[name: '${Branch}']],
            doGenerateSubmoduleConfigurations: false,
            extensions: [],
            submoduleCfg: [],
            userRemoteConfigs: [[credentialsId: 'github-credentials', url: 'https://github.com/mcheriyath/slack-apigw-lambda-jenkins.git']]
            ])
          }
        }

        stage ('PREPARING ENVIRONMENT') {
          agent any
          steps {
            sh 'docker build -t slack-apigw .'
          }
        }

        stage('RUN TEST') {
          agent {
            docker {
              image 'slack-apigw:latest'
              args '-v ${WORKSPACE}:/usr/src/app -u 0 -w /usr/src/app'
            }
          }

          steps {
            sh 'npm install'
            sh 'npm run test'
          }

          post {
            always {
              junit allowEmptyResults: true, testResults: 'junit.xml'
            }
          }
        }
    }
    post {
        failure {
            // notify when Pipeline fails
            slackSend (color: '#FF0000', message: "FAILED: '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (<${env.BUILD_URL}testReport|Open>)")
        }
        success {
            // notify on Pipeline success
            slackSend (color: '#00FF7F', message: "SUCCESS: '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (<${env.BUILD_URL}testReport|Open>)")
        }
        always {
          cleanWs()
        }
    }
}
